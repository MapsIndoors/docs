<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Indoor Navigation Built with Google Maps</title>
    <link>https://mapsindoors.github.io/</link>
    <description>Recent content on Indoor Navigation Built with Google Maps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>MapsIndoors (c)2017</copyright>
    
	<atom:link href="https://mapsindoors.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/android/v1/guides/searching-and-directions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v1/guides/searching-and-directions/</guid>
      <description>//Locations provider, used for search MPLocationsProvider locs = new MPLocationsProvider(this);
//Directions renderer, used to display route on map DirectionsRenderer directionsRenderer = new DirectionsRenderer(this, selectionListener);
//Listen for query results locs.setOnLocationsReadyListener(new OnLocationsReadyListener() { @Override public void onLocationsReady(List locations) {
 //Origin hard-coded here Location origin = new MPLocation(new Point(57.956, 8.667, 0), &amp;quot;My location&amp;quot;); //Destination is first location in list Location destination = locations.get(0); RoutingProvider routingProvider = new MPRoutingProvider(); //Add listener routingProvider.setOnRouteResultListener(new OnRouteResultListener() { @Override public void onRouteResult(final Route newRoute) { //Render the route you get from the service (you need to create a selectionListener too) directionsRenderer.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/android/v2/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/changelog/</guid>
      <description>Changelog Changelog for the MapsIndoors Android SDK. This document structure is based on Keep a Changelog and the project adheres to Semantic Versioning.
[2.0.7] - 2018-09-05 Added  MapControl.setDisplayRuleDefaultIconSize(): Overwrites the display rules default icon size. Applies only to those display rules that don&amp;rsquo;t specify the size. LocationDisplayRule.Builder.setVectorDrawableIcon( vectorDrawableResId ): Sets the icon using a VectorDrawable at the default size (either the current base - 20dp or the one set with MapControl.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/android/v2/tutorials/showmultiplelocationsshowmultiplelocationsfragment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/tutorials/showmultiplelocationsshowmultiplelocationsfragment/</guid>
      <description>Add a GoogleMap and a MapControl to the class
MapControl mMapControl; GoogleMap mGoogleMap;  The lat lng of the Venue
static final LatLng VENUE_LAT_LNG = new LatLng( 57.05813067, 9.95058065 );  The query object and the querry builder
LocationQuery mLocationQuery; LocationQuery.Builder mLocationQueryBuilder; SupportMapFragment mMapFragment; public ShowMultipleLocationsFragment() {  init the query builder, in this case we will query for all to toilets
mLocationQueryBuilder. setQuery(&amp;quot;Toilet&amp;quot;). setOrderBy( LocationQuery.NO_ORDER ). setFloor(1). setMaxResults(50);  Build the query</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/changelog/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v1/guides/search-and-directions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v1/guides/search-and-directions/</guid>
      <description>MPLocationsProvider* locationsProvider = [[MPLocationsProvider alloc] init]; MPDirectonsRenderer* renderer = [[MPDirectonsRenderer alloc] init]; MPDirectionsService* directionsService = [[MPDirectionsService alloc] initWithMapsIndoorsSolutionId: sID googleApiKey: gApiKey];
MPLocationQuery* q1 = [[MPLocationQuery alloc] init]; q1.solutionId = sID; q1.query = @&amp;quot;location-name&amp;quot;; q1.max = 1; MPLocationQuery* q2 = [[MPLocationQuery alloc] init]; q2.solutionId = sID; q2.query = @&amp;quot;other-location-name&amp;quot;; q2.max = 1; [locationsProvider getLocationsUsingQueryAsync:q1 language:@&amp;quot;en&amp;quot; completionHandler:^(MPLocationDataset *locationData, NSError *error) { MPLocation* from = locationData.list.firstObject; [locationsProvider getLocationsUsingQueryAsync:q2 language:@&amp;quot;en&amp;quot; completionHandler:^(MPLocationDataset *locationData, NSError *error) { MPLocation* to = locationData.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v2/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/reference/</guid>
      <description>class FAImageView class FAImageView : public UIImageView  Summary    Members Descriptions     {property} UIColor *defaultIconColorUI_APPEARANCE_SELECTOR    {property} NSString *defaultIconIdentifier    {property} FAIcondefaultIcon    {property} UILabel *defaultView     Members {property} UIColor *defaultIconColorUI_APPEARANCE_SELECTOR {property} NSString *defaultIconIdentifier {property} FAIcondefaultIcon {property} UILabel *defaultView class MapsIndoors class MapsIndoors : public NSObject  Summary    Members Descriptions     {property} UIFont *mapLabelFont The font that MapsIndoors should use when rendering labels on the map.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/searchsearchmapcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/searchsearchmapcontroller/</guid>
      <description>Add a GMSMapView and a MPMapControl to the class
var map: GMSMapView? = nil var mapControl: MPMapControl? = nil  Setup map so that it shows the demo venue and initialise mapControl
self.map = GMSMapView.init(frame: CGRect.zero) self.map?.camera = .camera(withLatitude: 57.057964, longitude: 9.9504112, zoom: 20) self.mapControl = MPMapControl.init(map: self.map!)  Setup a button that targets a method (openSearch) in your class
let button = UIButton.init() button.setTitle(&amp;quot;Search&amp;quot;, for: .normal) button.addTarget(self, action: #selector(openSearch), for: .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/showlocationshowlocationcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/showlocationshowlocationcontroller/</guid>
      <description>Show map
self.map = GMSMapView.init(frame: CGRect.zero) self.view = self.map self.map?.camera = .camera(withLatitude: 57.057964, longitude: 9.9504112, zoom: 20) self.mapControl = MPMapControl.init(map: self.map!) let locations = MPLocationsProvider.init() let queryObj = MPLocationQuery.init() queryObj.query = &amp;quot;info&amp;quot; queryObj.max = 1 locations.getLocationsUsing(queryObj) { (locationData, error) in if error == nil { let firstLocation = locationData?.list?.first self.mapControl?.selectedLocation = firstLocation self.mapControl?.currentFloor = firstLocation?.floor // You are not guaranteed that the visible floor contains any search results, so that is why we change floor } }  See the sample in ShowLocationController.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/showmultiplelocationsshowmultiplelocationscontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/showmultiplelocationsshowmultiplelocationscontroller/</guid>
      <description>Show map
self.map = GMSMapView.init(frame: CGRect.zero) self.view = self.map self.map?.camera = .camera(withLatitude: 57.057964, longitude: 9.9504112, zoom: 17) self.mapControl = MPMapControl.init(map: self.map!)  Show search on map
let locations = MPLocationsProvider.init() let queryObj = MPLocationQuery.init() queryObj.categories = [&amp;quot;Toilet&amp;quot;] queryObj.max = 50 locations.getLocationsUsing(queryObj) { (locationData, error) in if error == nil { self.mapControl?.searchResult = locationData!.list let firstLocation = locationData?.list?.first self.mapControl?.currentFloor = firstLocation?.floor // You are not guaranteed that the visible floor contains any search results, so that is why we change floor } }  See the sample in ShowMultipleLocationsController.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/searchsearchmapcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/searchsearchmapcontroller/</guid>
      <description>Add a GMSMapView and a MPMapControl to the class
var map: GMSMapView? = nil var mapControl: MPMapControl? = nil var center: MPPoint = MPPoint.init(lat: 0, lon: 0)  Setup map so that it shows the demo venue and initialise mapControl
self.map = GMSMapView.init(frame: CGRect.zero) self.map?.delegate = self self.map?.camera = .camera(withLatitude: 57.057964, longitude: 9.9504112, zoom: 20) self.mapControl = MPMapControl.init(map: self.map!)  Setup a button that targets a method (openSearch) in your class</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/showlocationshowlocationcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/showlocationshowlocationcontroller/</guid>
      <description>Show map
self.map = GMSMapView.init(frame: CGRect.zero) self.view = self.map self.map?.camera = .camera(withLatitude: 57.057964, longitude: 9.9504112, zoom: 20) self.mapControl = MPMapControl.init(map: self.map!) let locations = MPLocationsProvider.init() let queryObj = MPLocationQuery.init() queryObj.query = &amp;quot;Paris&amp;quot; queryObj.max = 1 locations.getLocationsUsing(queryObj) { (locationData, error) in if error == nil { let firstLocation = locationData?.list?.first self.mapControl?.selectedLocation = firstLocation self.mapControl?.currentFloor = firstLocation?.floor } }  See the sample in ShowLocationController.swift</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/showmultiplelocationsshowmultiplelocationscontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/showmultiplelocationsshowmultiplelocationscontroller/</guid>
      <description>Show map
self.map = GMSMapView.init(frame: CGRect.zero) self.view = self.map self.map?.camera = .camera(withLatitude: 57.057964, longitude: 9.9504112, zoom: 17) self.mapControl = MPMapControl.init(map: self.map!)  Show search on map
let locations = MPLocationsProvider.init() let queryObj = MPLocationQuery.init() queryObj.categories = [&amp;quot;Toilet&amp;quot;] queryObj.max = 50 locations.getLocationsUsing(queryObj) { (locationData, error) in if error == nil { self.mapControl?.searchResult = locationData!.list let firstLocation = locationData?.list?.first self.mapControl?.currentFloor = firstLocation?.floor // You are not guaranteed that the visible floor contains any search results, so that is why we change floor } }  See the sample in ShowMultipleLocationsController.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/web/v2/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/web/v2/changelog/</guid>
      <description> Changelog Changelog for MapsIndoors SDK for JavaScript. This document structure is based on Keep a Changelog and the project adheres to Semantic Versioning.
[Unreleased] [1.4.3] - 2017-10-10 Added  Changelog was added.  Fixed  Fixed a bug in the way the Google Directions is merged together with MapsIndoors Directions when origin or destination is outside on venue.  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/web/v3/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/web/v3/changelog/</guid>
      <description>Changelog Changelog for MapsIndoors SDK for JavaScript. This document structure is based on Keep a Changelog and the project adheres to Semantic Versioning.
[3.0.0] - 2018-10-23 Changed  Script must now be loaded with apikey parameter instead of solutionId, e.g. https://app.mapsindoors.com/mapsindoors/js/sdk/mapsindoors-3.0.0-rc0.js?apikey=57e4e4992e74800ef8b69718 All services are now shared instances, so they cannot be newed. E.g. you must rewrite let directionsService = new mapsindoors.DirectionsService(); to let miDirectionsService = mapsindoors.DirectionsService; Location click events for a MapsIndoors instance are now subscribable with the event name click instead of location_click, e.</description>
    </item>
    
    <item>
      <title>About MapsIndoors SDK</title>
      <link>https://mapsindoors.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/about/</guid>
      <description>MapsIndoors SDK smoothly provides you with indoor maps, search and navigation to web, mobile web and native Android and iOS. It can be interfaced with leading indoor positioning technologies such as Bluetooth beacons, WiFi positioning or sensor-based. MapsIndoors SDK serves as a rock-solid backbone that is used by thousands of simultaneous users for indoor navigation.
MapsIndoors for Web MapsIndoors for Web will provide your users with browser-based wayfinding using the search function.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>https://mapsindoors.github.io/android/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/changelog/</guid>
      <description>Changelog for the MapsIndoors Android SDK. This document structure is based on Keep a Changelog and the project adheres to Semantic Versioning.
[2.0.3] - 2018-06-?? Added  MapsIndoors.getAvailableLanguages() returns a list of the solution&amp;rsquo;s available languages or just null if data isn&amp;rsquo;t available MIConnectivityUtils.isOnline() replaces UrlLoader.isOnline() MapControl.setOnMarkerInfoWindowLongClickListener()  Changed  MapsIndoors.getDefaultLanguage() will return now the solution&amp;rsquo;s default language instead of the library&amp;rsquo;s fallback one. If there is no data available yet, this method will now return null  Deprecated  UrlLoader.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>https://mapsindoors.github.io/android/v1/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v1/changelog/</guid>
      <description> Changelog for MapsIndoors for Android. This document structure is based on Keep a Changelog and the project adheres to Semantic Versioning.
## [2.0.0-beta1] - 2017-10-04 ### Changed - Put something in here&amp;hellip; - Fix MPLocation.copy() results in nil MPLocation.descr.
### Fixed - Fix geometry property nil when copying MPLocation - Fix unlabeled icons not respecting MapsIndoors.mapIconSize
Added  Support for statically adding a position provider, optionally by setting MapsIndoors.positionProvider  </description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>https://mapsindoors.github.io/cms/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/cms/changelog/</guid>
      <description>[3.5.0] - 20-03-2018 Added  Navigate between buildings or reset the venue view in export map. Filter locations by floor (list view). New Map (google maps js api 3.32).  Changed  Moved location type to the top to better indicate its importance. The name of a location is now automatically set to the type. Can still be changed if needed. Split display settings and types in two pages. Improved analytics.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>https://mapsindoors.github.io/ios/v1/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v1/changelog/</guid>
      <description>Changelog for MapsIndoors for iOS. This document structure is based on Keep a Changelog and the project adheres to Semantic Versioning.
[1.12.6] - 2018-03-13 Fixed  Fixed issue with disappearing building graphics if the internal urls was invalid  [1.12.5] - 2018-01-15 Fixed  Fixed issue causing blue dot to disappear in some cases  [1.12.4] - 2018-01-12 Fixed  Fixed issue causing MPVenueProvider not to return any buildings once in a while Fixed issue causing MPDirectionsService not to return proper callbacks Fixed issues related to language code validation.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>https://mapsindoors.github.io/ios/v2/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/changelog/</guid>
      <description>Changelog for MapsIndoors for iOS. This document structure is based on Keep a Changelog and the project adheres to Semantic Versioning.
[2.1.6] 2018-11-27 Added  Support for extra time penalties in the directions service
Fixed When in flightmode, the routenetwork service would make two callbacks to the app: first callback with cached data and second callback with an error. The second callback would result in no route being produced</description>
    </item>
    
    <item>
      <title>Create a Search Experience with MapsIndoors - Part 1</title>
      <link>https://mapsindoors.github.io/android/v2/tutorials/searchmapdemosearchfragment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/tutorials/searchmapdemosearchfragment/</guid>
      <description>This is an example of creating a simple search experience using MapsIndoors. We will create a map with a search button that leads to another Fragment that handles the search and selection. On selection of a location, we go back to the map and shows the selected location on the map.
We will start by creating a simple search controller that handles search and selection of MapsIndoors locations
Declare a listener for our location selection with a onUserSelectedLocation method</description>
    </item>
    
    <item>
      <title>Create a Search Experience with MapsIndoors - Part 1</title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/searchmysearchcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/searchmysearchcontroller/</guid>
      <description>This is an example of creating a simple search experience using MapsIndoors. We will create a map with a search button that leads to another view controller that handles the search and selection. On selection of a location, we go back to the map and shows the selected location on the map.
We will start by creating a simple search controller that handles search and selection of MapsIndoors locations
Declare a protocol for our location selection with a didSelectLocation method</description>
    </item>
    
    <item>
      <title>Create a Search Experience with MapsIndoors - Part 1</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/searchmysearchcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/searchmysearchcontroller/</guid>
      <description>This is an example of creating a simple search experience using MapsIndoors. We will create a map with a search button that leads to another view controller that handles the search and selection. On selection of a location, we go back to the map and shows the selected location on the map.
We will start by creating a simple search controller that handles search and selection of MapsIndoors locations
Declare a protocol for our location selection with a didSelectLocation method</description>
    </item>
    
    <item>
      <title>Create a Search Experience with MapsIndoors - Part 2</title>
      <link>https://mapsindoors.github.io/android/v2/tutorials/searchmapdemosearchmapfragment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/tutorials/searchmapdemosearchmapfragment/</guid>
      <description>This is part 2 of the tutorial of creating a simple search experience using MapsIndoors. In Part 1 we created the search Fragment. Now we will create the &amp;ldquo;main&amp;rdquo; controller displaying the map and eventually the selected location.
Start by creating a Fragment
public class SearchMapFragment extends Fragment  Add a GoogleMap and a MapControl to the class
MapControl mMapControl; GoogleMap mGoogleMap;  Add other needed views for this example</description>
    </item>
    
    <item>
      <title>Creating your own Location Source - Part 1</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/locationdatasourcespeoplelocationsdatasource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/locationdatasourcespeoplelocationsdatasource/</guid>
      <description>Note! This document describes a pre-release feature. We reserve the right to change this feature and the corresponding interfaces without further notice. Any mentioned SDK versions are not intended for production use.
 In this tutorial we will show how you can build a custom Location Source, representing locations of people. The people locations will be served from a mocked list in the source and displayed on a map in a view controller.</description>
    </item>
    
    <item>
      <title>Creating your own Location Source - Part 2</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/locationdatasourceslocationdatasourcescontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/locationdatasourceslocationdatasourcescontroller/</guid>
      <description>Note! This document describes a pre-release feature. We reserve the right to change this feature and the corresponding interfaces without further notice. Any mentioned SDK versions are not intended for production use.
 This is part 2 of the tutorial of building a custom Location Source, representing locations of people. In Part 1 we created the Location Source. Now we will create a view controller displaying a map that shows the mocked people locations on top of a MapsIndoors map.</description>
    </item>
    
    <item>
      <title>Get Directions and Show the Result on a Map - Part 1</title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/showrouteshowrouteonmapcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/showrouteshowrouteonmapcontroller/</guid>
      <description>In this tutorial we will request a route, list the route parts and render these on a Google Map. A MapsIndoors route is made of one or more legs, each containing one or more steps.
We will start by making the controller that renders the route from the input of a route, a leg index and optionally a step index. Start by creating a UIViewController implementation that conforms to MPDirectionsRendererDelegate</description>
    </item>
    
    <item>
      <title>Get Directions and Show the Result on a Map - Part 1</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/showrouteshowrouteonmapcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/showrouteshowrouteonmapcontroller/</guid>
      <description>In this tutorial we will request a route, list the route parts and render these on a Google Map. A MapsIndoors route is made of one or more legs, each containing one or more steps.
We will start by making the controller that renders the route from the input of a route, a leg index and optionally a step index. Start by creating a UIViewController implementation that conforms to MPDirectionsRendererDelegate</description>
    </item>
    
    <item>
      <title>Get Directions and Show the Result on a Map - Part 2</title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/showrouteshowroutecontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/showrouteshowroutecontroller/</guid>
      <description>This is part 2 of the tutorial of requesting directions and showing the route result on a map. In Part 1 we created the controller that can display the map and route, and in this part we will create the controller that requests the route and list the route in a table. A MapsIndoors route is made of one or more legs, each containing one or more steps.
Start by creating a UIViewController implementation</description>
    </item>
    
    <item>
      <title>Get Directions and Show the Result on a Map - Part 2</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/showrouteshowroutecontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/showrouteshowroutecontroller/</guid>
      <description>This is part 2 of the tutorial of requesting directions and showing the route result on a map. In Part 1 we created the controller that can display the map and route, and in this part we will create the controller that requests the route and list the route in a table. A MapsIndoors route is made of one or more legs, each containing one or more steps.
Start by creating a UIViewController implementation</description>
    </item>
    
    <item>
      <title>Guide to the MapsIndoors CMS</title>
      <link>https://mapsindoors.github.io/cms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/cms/</guid>
      <description>About the User Roles There are 2 roles in the system:
Editor - Editors can create new locations, make changes to and remove existing locations
Admin - Administrators also have access to types, categories and users management, network visualisation and app configuration.
Regarding the transition to MapsIndoors CMS 3.0 If you are using the CMS to manage push messaging or beacons you have to continue using the previous CMS version.</description>
    </item>
    
    <item>
      <title>Indoor Navigation Built with Google Maps</title>
      <link>https://mapsindoors.github.io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/</guid>
      <description>Welcome to the developer site of MapsIndoors by MapsPeople. You can integrate MapsIndoors into apps, web solutions and/or information kiosks using the MapsIndoors SDK. Get your hands dirty by digging into our guides, code snippets and reference material for the MapsIndoors navigation platform. The documentation and SDKs for both Web, iOS and Android are all available on this site. We strive to give you everything you need to know about how to setup an indoor navigation solution.</description>
    </item>
    
    <item>
      <title>Indoor Positioning with MapsIndoors</title>
      <link>https://mapsindoors.github.io/introductions/indoor-positioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/introductions/indoor-positioning/</guid>
      <description>To get an introduction to the field of indoor positioning, we recommend this blog post for a start.
MapsIndoors SDK is not an IPS (Indoor Positioning Service). MapsIndoors provides indoor maps and indoor directions, and since it is based on Google Maps, we also provide seamless indoor/outdoor integration.
With this in mind you need to find an IPS and then use the location from that IPS in MapsIndoors. To some extend iOS CoreLocation and Android Location Services can fulfill the role of an IPS, depending on the building infrastructure.</description>
    </item>
    
    <item>
      <title>Location Data Sources</title>
      <link>https://mapsindoors.github.io/introductions/location-sources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/introductions/location-sources/</guid>
      <description>Note! This document describes a pre-release feature. We reserve the right to change this feature and the corresponding interfaces without further notice. Any mentioned SDK versions are not intended for production use.
 At MapsPeople we are in the process of shaping up a new feature in MapsIndoors SDK for Android and iOS called Location Data Sources. Basically we are making it possible to register your own custom data source, adhering to a very simple interface.</description>
    </item>
    
    <item>
      <title>MapsIndoors First Steps</title>
      <link>https://mapsindoors.github.io/firststeps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/firststeps/</guid>
      <description>Setup Google maps API You need to setup the Google Maps API in your project by following the steps in this links below depending on which platform you are using :
 Web : You will need the Google Maps JavaScript API. Android : You will need the Google Maps Android API. iOS : You will need the Google Maps SDK for iOS.  Some Web Service APIs are needed also for the mapsIndoors SDK so make sure to enable them when getting your key :</description>
    </item>
    
    <item>
      <title>MapsIndoors SDK for Android - Tutorials</title>
      <link>https://mapsindoors.github.io/android/v2/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/tutorials/</guid>
      <description>With these simple tutorials, each reflecting common use cases, you can get more hands on experience with MapsIndoors on Android.
 Show Details for a Tapped Location Create a Search Experience Showing a Blue Dot / User Location  </description>
    </item>
    
    <item>
      <title>MapsIndoors SDK for iOS - Tutorials</title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/</guid>
      <description>With these simple tutorials, each reflecting common use cases, you can get more hands on experience with MapsIndoors on iOS.
 Show Details for a Tapped Location Create a Search Experience Showing a Blue Dot / User Location  </description>
    </item>
    
    <item>
      <title>MapsIndoors SDK for iOS - Tutorials</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/</guid>
      <description>With these simple tutorials, each reflecting common use cases, you can get more hands on experience with MapsIndoors on iOS.
 Show Details for a Tapped Location Create a Search Experience Showing a Blue Dot / User Location Create a custom Location Source  </description>
    </item>
    
    <item>
      <title>MapsIndoors SDK for iOS v2 - Guides</title>
      <link>https://mapsindoors.github.io/android/v2/guides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/guides/</guid>
      <description>Searching for Locations and Displaying the Results on a Map Use the MPLocationsProvider class to search for content in your MapsIndoors solution.
This example shows how to setup a query for the nearest single best matching location and display the result on the map:
mLocationsProvider = new MPLocationsProvider(); mLocationQueryBuilder = new LocationQuery.Builder(); // init the query builder, in this case we will query the coffee machine in our office mLocationQueryBuilder.</description>
    </item>
    
    <item>
      <title>MapsIndoors SDK for iOS v2 - Guides</title>
      <link>https://mapsindoors.github.io/ios/v2/guides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/guides/</guid>
      <description>Searching for Locations and Displaying the Results on a Map Use the MPLocationsProvider class to search for content in your MapsIndoors solution.
This example shows how to setup a query for the nearest single best matching location and display the result on the map:
let locations = MPLocationsProvider.init() let queryObj = MPLocationQuery.init() queryObj.query = &amp;quot;Toilet&amp;quot; queryObj.near = MPPoint.init(lat: 57.057964, lon: 9.9504112) queryObj.max = 1 locations.getLocationsUsing(queryObj) { (locationData, error) in if error == nil { let location = locationData?</description>
    </item>
    
    <item>
      <title>MapsIndoors for Android - Getting Started</title>
      <link>https://mapsindoors.github.io/android/v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v1/</guid>
      <description>Note! A newer version of the MapsIndoors SDK for Android is available. The legacy version will not receive new features and will only get bugfix and security updates.
 This guide explains how to start using a MapsIndoors map in your Android application. Make sure that you have read the prerequisites.
Basic Example You will find in the link an up and running project that contains the minimum code to start a MapsIndoors project.</description>
    </item>
    
    <item>
      <title>MapsIndoors for Android - Getting Started</title>
      <link>https://mapsindoors.github.io/android/v2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/</guid>
      <description>This guide explains how to start using a MapsIndoors map in your Android application. Make sure that you have read the prerequisites.
To benefit from the guides, you will need basic knowledge about:
 Android Development Google Maps Android API  You can get started in two ways, either by reviewing and modifying the basic example or do the clean setup.
Basic Example You will find in the link a repo that contains the minimum code to start a MapsIndoors project.</description>
    </item>
    
    <item>
      <title>MapsIndoors for Android - Part 2</title>
      <link>https://mapsindoors.github.io/android/v1/guide-part2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v1/guide-part2/</guid>
      <description>Trying the demo App You can download the demo app from our github repository: Demo App Then run it and don&amp;rsquo;t forget to do a Gradle sync before and download all the required dependencies.
Using Routing Routing is requested with at least an origin, a destination and a transit mode – transit mode corresponds directly to Google Maps transit modes: Walking, bicycling, driving and transit (public transportation).
RoutingProvider routingProvider = new MPRoutingProvider(); routingProvider.</description>
    </item>
    
    <item>
      <title>MapsIndoors for Android Reference Guide</title>
      <link>https://mapsindoors.github.io/android/v1/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v1/reference/</guid>
      <description>Please head to this reference manual.</description>
    </item>
    
    <item>
      <title>MapsIndoors for Web - Getting started</title>
      <link>https://mapsindoors.github.io/web/v2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/web/v2/</guid>
      <description>Note! A newer version of the MapsIndoors SDK for Web is available. The legacy version will not receive new features and will only get bugfix and security updates.
 This guide explains how to start using a MapsIndoors map in your HTML application. Make sure that you have read the prerequisites.
To benefit from the guides, you will need basic knowledge about:
 JavaScript HTML/CSS Google Maps Javascript API V3  You can get started in two ways, either by reviewing and modifying the basic example or do the clean setup.</description>
    </item>
    
    <item>
      <title>MapsIndoors for Web - Getting started</title>
      <link>https://mapsindoors.github.io/web/v3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/web/v3/</guid>
      <description>This guide explains how to start using a MapsIndoors map in your HTML application. Make sure that you have read the prerequisites.
To benefit from the guides, you will need basic knowledge about:
 JavaScript HTML/CSS Google Maps Javascript API V3  You can get started in two ways, either by reviewing and modifying the basic example or do the clean setup.
Basic Example You will find in the link an up and running website sample that demonstrates the common use cases like mapping, search &amp;amp; directions in MapsIndoors.</description>
    </item>
    
    <item>
      <title>MapsIndoors for Web - Guides</title>
      <link>https://mapsindoors.github.io/web/v3/guides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/web/v3/guides/</guid>
      <description>Using Events MapsIndoors uses the Google Maps built-in event handling system, so listening for event on various object is straight-forward. Here are some examples.
google.maps.event.addListener(myMapsIndoors, &amp;quot;ready&amp;quot;, function (result) { console.log(result); }); google.maps.event.addListener(myMapsIndoors, &#39;building_changed&#39;, function () { console.log(this); }); google.maps.event.addListener(myMapsIndoors, &#39;floor_changed&#39;, function () { console.log(this); }); google.maps.event.addListener(myMapsIndoors, &#39;click&#39;, function () { console.log(this); }); google.maps.event.addListener(marker, &#39;click&#39;, function () { console.dir(this); });  The event names and their targets are as follows:</description>
    </item>
    
    <item>
      <title>MapsIndoors for Web - Part 2</title>
      <link>https://mapsindoors.github.io/web/v2/guide-part2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/web/v2/guide-part2/</guid>
      <description>Trying the Showcase Web App A showcase app is available on GitHub, free to use and adapt to your needs.
To try it out right away: Make sure nodejs, npm and gulp is installed on your system Using a terminal/shell in the project folder, run the following commands:
 npm install -g browser-sync gulp build browser-sync start &amp;ndash;server If on Windows and prompted, allow server to use your PC network Open your browser at http://localhost:3000/app (or whatever port browser-sync chooses per default)  Create a Search and Suggestions box If you need to facilitate search functionality to your MapsIndoors solution, you can use the Suggestions UI component.</description>
    </item>
    
    <item>
      <title>MapsIndoors for Web - Reference Guide</title>
      <link>https://mapsindoors.github.io/web/v2/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/web/v2/reference/</guid>
      <description>MapsIndoors mapsindoors.MapsIndoors(opts:MapsIndoorsOptions)
Methods clear() find(args:string|FindOptions) : Promise(Location) fitBuilding(buildingId:string) fitVenue(venueId?:string) getBuilding() : Building getDisplayRule(type:string) : DisplayRuleLiteral getFloor() : number getLocationsVisible() : bool getMap() : google.maps.Map getStyles() : VenueStyle[] getVenue() : Venue setDisplayRule(rule: DisplayRuleLiteral) setLanguage(language:string) setFloor(floor:number) setMap(map:google.maps.Map) setStyle(style:string) //style folder setVenue(venue:string|Venue) locate(options:locateOptions)  Events  ready map_changed floor_changed building_changed venue_changed style_changed locations_visible_cshanged location_click  MapsIndoorsOptions Literal MapsIndoorsOptions { map: google.maps.Map, floor: number, locationVisible: boolean }  DisplayRule Literal DisplayRule { from?: number, to?</description>
    </item>
    
    <item>
      <title>MapsIndoors for Web - Reference Guide</title>
      <link>https://mapsindoors.github.io/web/v3/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/web/v3/reference/</guid>
      <description>Table of Contents  MapsIndoors  getBuilding fitBuilding filter setBuildingOutlineOptions getBuildingOutlineOptions setDisplayRule getDisplayRule setFloor getFloor setMap getMap setVenue getVenue fitVenue setLabelOptions getLabelOptions  DataLayer DirectionsRenderer  pLine  FloorSelector AppConfig MenuItem Building BuildingOutlineOptions Category DisplayRule LabelOptions Location MapsIndoorsOptions Solution Type Venue  MapsIndoors Creates an instance of MapsIndoors.
Parameters
 opts MapsIndoorsOptions  getBuilding Gets the building that currently is in focus
Returns Building Building
fitBuilding Fits the building&amp;rsquo;s geometry in the map&amp;rsquo;s bounding box</description>
    </item>
    
    <item>
      <title>MapsIndoors for iOS - Getting Started</title>
      <link>https://mapsindoors.github.io/ios/v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v1/</guid>
      <description>Note! A newer version of the MapsIndoors SDK for iOS is available. The legacy version will not receive new features and will only get bugfix and security updates.
 This guide explains how to start using a MapsIndoors map in your iOS application. Make sure that you have read the prerequisites.
Basic Example You will find in the link an up and running project that contains the minimum code to start a MapsIndoors project.</description>
    </item>
    
    <item>
      <title>MapsIndoors for iOS - Getting Started</title>
      <link>https://mapsindoors.github.io/ios/v2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/</guid>
      <description>This guide explains how to start using a MapsIndoors map in your iOS application. Make sure that you have read the prerequisites.
To benefit from the guides, you will need basic knowledge about:
 iOS Development Google Maps iOS SDK  You can get started in two ways, either by reviewing and modifying the basic examples or do the clean setup.
Basic Examples For simple examples of MapsIndoors implementations, run pod try MapsIndoors (see below for setting up CocoaPods or just clone this repository) and run the XCode Scheme called Demos.</description>
    </item>
    
    <item>
      <title>MapsIndoors for iOS - Part 2</title>
      <link>https://mapsindoors.github.io/ios/v1/guide-part2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v1/guide-part2/</guid>
      <description>Trying the demo App Open your Terminal and run
pod try MapsIndoors  This will install and fire up the full-featured SDK Demo Project. Remember to add your own key Google Maps iOS API key in AppDelegate:
GMSServices.provideAPIKey(&amp;quot;YOUR_GOOGLE_KEY&amp;quot;)  Using Routing Routing is requested with at least an origin, a destination and a transit mode – transit mode corresponds directly to Google Maps transit modes: Walking, bicycling, driving and transit (public transportation).</description>
    </item>
    
    <item>
      <title>MapsIndoors for iOS Reference Guide</title>
      <link>https://mapsindoors.github.io/ios/v1/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v1/reference/</guid>
      <description>Please head to this reference manual.</description>
    </item>
    
    <item>
      <title>Show Location Details</title>
      <link>https://mapsindoors.github.io/android/v2/tutorials/locationdetailsdemolocationdetailsfragment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/tutorials/locationdetailsdemolocationdetailsfragment/</guid>
      <description>This is an example of displaying some details of a MapsIndoors location
Start by creating a Fragment or an Activity class that contains the google map fragment
public class LocationDetailsFragment extends Fragment  Add a GoogleMap and a MapControl to the class
MapControl mMapControl; GoogleMap mGoogleMap;  Add other needed views for this example
SupportMapFragment mMapFragment; TextView detailsTextView;  The lat lng of the Venue
static final LatLng VENUE_LAT_LNG = new LatLng( 57.</description>
    </item>
    
    <item>
      <title>Show Location Details</title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/locationdetailslocationdetailscontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/locationdetailslocationdetailscontroller/</guid>
      <description>This is an example of displaying some details of a MapsIndoors location
Start by creating a UIViewController class that conforms to the GMSMapViewDelegate protocol
class LocationDetailsController: UIViewController, GMSMapViewDelegate {  Add a GMSMapView and a MPMapControl to the class
var map: GMSMapView? = nil var mapControl: MPMapControl? = nil  Add other views needed for this example
var detailsView:UIStackView = UIStackView.init() var mainView:UIStackView = UIStackView.init() var nameLabel = UILabel.init() var descrLabel = UILabel.</description>
    </item>
    
    <item>
      <title>Show Location Details</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/locationdetailslocationdetailscontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/locationdetailslocationdetailscontroller/</guid>
      <description>This is an example of displaying some details of a MapsIndoors location
Start by creating a UIViewController class that conforms to the GMSMapViewDelegate protocol
class LocationDetailsController: UIViewController, GMSMapViewDelegate {  Add a GMSMapView and a MPMapControl to the class
var map: GMSMapView? = nil var mapControl: MPMapControl? = nil  Add other views needed for this example
var detailsView:UIStackView = UIStackView.init() var mainView:UIStackView = UIStackView.init() var nameLabel = UILabel.init() var descrLabel = UILabel.</description>
    </item>
    
    <item>
      <title>Show the Blue Dot with MapsIndoors - Part 1</title>
      <link>https://mapsindoors.github.io/android/v2/tutorials/showuserlocationdemopositionprovider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/tutorials/showuserlocationdemopositionprovider/</guid>
      <description>In this tutorial we will show how you can show a blue dot on the map, representing the users location. The position will be served from a mocked positioning provider and displayed on a map in a view controller.
We will start by creating our implementation of a positioning provider.
Create a class DemoPositionProvider that implements PositionProvider.
public class DemoPositionProvider implements PositionProvider  Add some member variables to DemoPositionProvider.
 mPositionUpdateListener: The listener object isRunning: A running state boolean flag mLatestPosition: The latest positioning result mPositionUpdateTimer: A timer so we can update the position of the user within an time interval</description>
    </item>
    
    <item>
      <title>Show the Blue Dot with MapsIndoors - Part 1</title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/showmylocationmypositionprovider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/showmylocationmypositionprovider/</guid>
      <description>In this tutorial we will show how you can show a blue dot on the map, representing the users location. The position will be served from a mocked positioning provider and displayed on a map in a view controller.
We will start by creating our implementation of a positioning provider.
Create a class MyPositionProvider that inherits from NSObject and implements MPPositionProvider.
class MyPositionProvider : NSObject, MPPositionProvider {  Add some member variables to MyPositionProvider.</description>
    </item>
    
    <item>
      <title>Show the Blue Dot with MapsIndoors - Part 1</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/showmylocationmypositionprovider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/showmylocationmypositionprovider/</guid>
      <description>In this tutorial we will show how you can show a blue dot on the map, representing the users location. The position will be served from a mocked positioning provider and displayed on a map in a view controller.
We will start by creating our implementation of a positioning provider.
Create a class MyPositionProvider that inherits from NSObject and implements MPPositionProvider.
class MyPositionProvider : NSObject, MPPositionProvider {  Add some member variables to MyPositionProvider.</description>
    </item>
    
    <item>
      <title>Show the Blue Dot with MapsIndoors - Part 2</title>
      <link>https://mapsindoors.github.io/android/v2/tutorials/showuserlocationshowuserlocationfragment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/tutorials/showuserlocationshowuserlocationfragment/</guid>
      <description>This is part 2 of the tutorial of managing a blue dot on the map. In Part 1 we created the position provider. Now we will create a Fragment displaying a map that shows the users (mock) location.
Create a class ShowUserLocationFragment that inherits from Fragment.
public class ShowUserLocationFragment extends Fragment {  Add a GoogleMap and a MapControl to the class
GoogleMap mGoogleMap; MapControl mMapControl;  Add a map fragment</description>
    </item>
    
    <item>
      <title>Show the Blue Dot with MapsIndoors - Part 2</title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/showmylocationshowmylocationcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/showmylocationshowmylocationcontroller/</guid>
      <description>This is part 2 of the tutorial of managing a blue dot on the map. In Part 1 we created the position provider. Now we will create a view controller displaying a map that shows the users (mock) location.
Create a class ShowMyLocationController that inherits from UIViewController.
class ShowMyLocationController: UIViewController {  Add a GMSMapView and a MPMapControl to the class
var map: GMSMapView? = nil var mapControl: MPMapControl? = nil override func viewDidLoad() { super.</description>
    </item>
    
    <item>
      <title>Show the Blue Dot with MapsIndoors - Part 2</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/showmylocationshowmylocationcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/showmylocationshowmylocationcontroller/</guid>
      <description>This is part 2 of the tutorial of managing a blue dot on the map. In Part 1 we created the position provider. Now we will create a view controller displaying a map that shows the users (mock) location.
Create a class ShowMyLocationController that inherits from UIViewController.
class ShowMyLocationController: UIViewController {  Add a GMSMapView and a MPMapControl to the class
var map: GMSMapView? = nil var mapControl: MPMapControl? = nil override func viewDidLoad() { super.</description>
    </item>
    
  </channel>
</rss>