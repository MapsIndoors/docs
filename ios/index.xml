<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ios on Indoor Navigation Built with Google Maps</title>
    <link>https://mapsindoors.github.io/ios/</link>
    <description>Recent content in Ios on Indoor Navigation Built with Google Maps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>MapsIndoors (c)2017</copyright>
    
	<atom:link href="https://mapsindoors.github.io/ios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/changelog/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v1/guides/search-and-directions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v1/guides/search-and-directions/</guid>
      <description>MPLocationsProvider* locationsProvider = [[MPLocationsProvider alloc] init]; MPDirectonsRenderer* renderer = [[MPDirectonsRenderer alloc] init]; MPDirectionsService* directionsService = [[MPDirectionsService alloc] initWithMapsIndoorsSolutionId: sID googleApiKey: gApiKey];
MPLocationQuery* q1 = [[MPLocationQuery alloc] init]; q1.solutionId = sID; q1.query = @&amp;quot;location-name&amp;quot;; q1.max = 1; MPLocationQuery* q2 = [[MPLocationQuery alloc] init]; q2.solutionId = sID; q2.query = @&amp;quot;other-location-name&amp;quot;; q2.max = 1; [locationsProvider getLocationsUsingQueryAsync:q1 language:@&amp;quot;en&amp;quot; completionHandler:^(MPLocationDataset *locationData, NSError *error) { MPLocation* from = locationData.list.firstObject; [locationsProvider getLocationsUsingQueryAsync:q2 language:@&amp;quot;en&amp;quot; completionHandler:^(MPLocationDataset *locationData, NSError *error) { MPLocation* to = locationData.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v2/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/reference/</guid>
      <description>class FAImageView class FAImageView : public UIImageView  Summary    Members Descriptions     {property} UIColor *defaultIconColorUI_APPEARANCE_SELECTOR    {property} NSString *defaultIconIdentifier    {property} FAIcondefaultIcon    {property} UILabel *defaultView     Members {property} UIColor *defaultIconColorUI_APPEARANCE_SELECTOR {property} NSString *defaultIconIdentifier {property} FAIcondefaultIcon {property} UILabel *defaultView class MapsIndoors class MapsIndoors : public NSObject  Summary    Members Descriptions     {property} UIFont *mapLabelFont The font that MapsIndoors should use when rendering labels on the map.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/searchsearchmapcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/searchsearchmapcontroller/</guid>
      <description>Add a GMSMapView and a MPMapControl to the class
var map: GMSMapView? = nil var mapControl: MPMapControl? = nil  Setup map so that it shows the demo venue and initialise mapControl
self.map = GMSMapView.init(frame: CGRect.zero) self.map?.camera = .camera(withLatitude: 57.057964, longitude: 9.9504112, zoom: 20) self.mapControl = MPMapControl.init(map: self.map!)  Setup a button that targets a method (openSearch) in your class
let button = UIButton.init() button.setTitle(&amp;quot;Search&amp;quot;, for: .normal) button.addTarget(self, action: #selector(openSearch), for: .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/showlocationshowlocationcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/showlocationshowlocationcontroller/</guid>
      <description>Show map
self.map = GMSMapView.init(frame: CGRect.zero) self.view = self.map self.map?.camera = .camera(withLatitude: 57.057964, longitude: 9.9504112, zoom: 20) self.mapControl = MPMapControl.init(map: self.map!) let locations = MPLocationsProvider.init() let queryObj = MPLocationQuery.init() queryObj.query = &amp;quot;info&amp;quot; queryObj.max = 1 locations.getLocationsUsing(queryObj) { (locationData, error) in if error == nil { let firstLocation = locationData?.list?.first self.mapControl?.selectedLocation = firstLocation self.mapControl?.currentFloor = firstLocation?.floor // You are not guaranteed that the visible floor contains any search results, so that is why we change floor } }  See the sample in ShowLocationController.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/showmultiplelocationsshowmultiplelocationscontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/showmultiplelocationsshowmultiplelocationscontroller/</guid>
      <description>Show map
self.map = GMSMapView.init(frame: CGRect.zero) self.view = self.map self.map?.camera = .camera(withLatitude: 57.057964, longitude: 9.9504112, zoom: 17) self.mapControl = MPMapControl.init(map: self.map!)  Show search on map
let locations = MPLocationsProvider.init() let queryObj = MPLocationQuery.init() queryObj.categories = [&amp;quot;Toilet&amp;quot;] queryObj.max = 50 locations.getLocationsUsing(queryObj) { (locationData, error) in if error == nil { self.mapControl?.searchResult = locationData!.list let firstLocation = locationData?.list?.first self.mapControl?.currentFloor = firstLocation?.floor // You are not guaranteed that the visible floor contains any search results, so that is why we change floor } }  See the sample in ShowMultipleLocationsController.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v3/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/reference/</guid>
      <description>class FAImageView class FAImageView : public UIImageView  Summary    Members Descriptions     {property} UIColor *defaultIconColorUI_APPEARANCE_SELECTOR    {property} NSString *defaultIconIdentifier    {property} FAIcondefaultIcon    {property} UILabel *defaultView     Members {property} UIColor *defaultIconColorUI_APPEARANCE_SELECTOR {property} NSString *defaultIconIdentifier {property} FAIcondefaultIcon {property} UILabel *defaultView class MapsIndoors class MapsIndoors : public NSObject  Summary    Members Descriptions     {property} UIFont *mapLabelFont The font that MapsIndoors should use when rendering labels on the map.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/searchsearchmapcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/searchsearchmapcontroller/</guid>
      <description>Add a GMSMapView and a MPMapControl to the class
var map: GMSMapView? = nil var mapControl: MPMapControl? = nil var center: MPPoint = MPPoint.init(lat: 0, lon: 0)  Setup map so that it shows the demo venue and initialise mapControl
self.map = GMSMapView.init(frame: CGRect.zero) self.map?.delegate = self self.map?.camera = .camera(withLatitude: 57.057964, longitude: 9.9504112, zoom: 20) self.mapControl = MPMapControl.init(map: self.map!)  Setup a button that targets a method (openSearch) in your class</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/showlocationshowlocationcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/showlocationshowlocationcontroller/</guid>
      <description>Show map
self.map = GMSMapView.init(frame: CGRect.zero) self.view = self.map self.map?.camera = .camera(withLatitude: 57.057964, longitude: 9.9504112, zoom: 20) self.mapControl = MPMapControl.init(map: self.map!) let locations = MPLocationsProvider.init() let queryObj = MPLocationQuery.init() queryObj.query = &amp;quot;Paris&amp;quot; queryObj.max = 1 locations.getLocationsUsing(queryObj) { (locationData, error) in if error == nil { let firstLocation = locationData?.list?.first self.mapControl?.selectedLocation = firstLocation self.mapControl?.currentFloor = firstLocation?.floor } }  See the sample in ShowLocationController.swift</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/showmultiplelocationsshowmultiplelocationscontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/showmultiplelocationsshowmultiplelocationscontroller/</guid>
      <description>Show map
self.map = GMSMapView.init(frame: CGRect.zero) self.view = self.map self.map?.camera = .camera(withLatitude: 57.057964, longitude: 9.9504112, zoom: 17) self.mapControl = MPMapControl.init(map: self.map!)  Show search on map
let locations = MPLocationsProvider.init() let queryObj = MPLocationQuery.init() queryObj.categories = [&amp;quot;Toilet&amp;quot;] queryObj.max = 50 locations.getLocationsUsing(queryObj) { (locationData, error) in if error == nil { self.mapControl?.searchResult = locationData!.list let firstLocation = locationData?.list?.first self.mapControl?.currentFloor = firstLocation?.floor // You are not guaranteed that the visible floor contains any search results, so that is why we change floor } }  See the sample in ShowMultipleLocationsController.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>https://mapsindoors.github.io/ios/v1/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v1/changelog/</guid>
      <description>Changelog for MapsIndoors for iOS. This document structure is based on Keep a Changelog and the project adheres to Semantic Versioning.
[1.12.6] - 2018-03-13 Fixed  Fixed issue with disappearing building graphics if the internal urls was invalid  [1.12.5] - 2018-01-15 Fixed  Fixed issue causing blue dot to disappear in some cases  [1.12.4] - 2018-01-12 Fixed  Fixed issue causing MPVenueProvider not to return any buildings once in a while Fixed issue causing MPDirectionsService not to return proper callbacks Fixed issues related to language code validation.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>https://mapsindoors.github.io/ios/v2/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/changelog/</guid>
      <description>Changelog for MapsIndoors for iOS. This document structure is based on Keep a Changelog and the project adheres to Semantic Versioning.
[2.1.9] 2019-02-15 Fixed  Fixed an occasional crash in MPVenueProvider, reported in github. Fixed an issue causing infowindow to pop up every time map is panned around with searchResult of 1 location Fixed a data synchronisation issue that could occur with two datasets that has offline capabilities Fixed MapsPeople logo so it respects MapView padding Fixed occasional crashes when running simulator builds  Added  Added some classes that were not present in reference guide  [2.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>https://mapsindoors.github.io/ios/v3/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/changelog/</guid>
      <description>Changelog for MapsIndoors for iOS. This document structure is based on Keep a Changelog and the project adheres to Semantic Versioning.
[3.0.0] 2019-03-04 Added  Support for external location data sources using [MapsIndoors registerLocationSources:sources] New location service MPLocationService to replace MPLocationsProvider Location clustering support using MPMapControl.locationClusteringEnabled Added building and venues to the search experience  Changed  MPLocation properties are now read only  Removed  Removed a number of deprecated methods that was introduced in V1  [2.</description>
    </item>
    
    <item>
      <title>Create a Search Experience with MapsIndoors - Part 1</title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/searchmysearchcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/searchmysearchcontroller/</guid>
      <description>This is an example of creating a simple search experience using MapsIndoors. We will create a map with a search button that leads to another view controller that handles the search and selection. On selection of a location, we go back to the map and shows the selected location on the map.
We will start by creating a simple search controller that handles search and selection of MapsIndoors locations
Declare a protocol for our location selection with a didSelectLocation method</description>
    </item>
    
    <item>
      <title>Create a Search Experience with MapsIndoors - Part 1</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/searchmysearchcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/searchmysearchcontroller/</guid>
      <description>This is an example of creating a simple search experience using MapsIndoors. We will create a map with a search button that leads to another view controller that handles the search and selection. On selection of a location, we go back to the map and shows the selected location on the map.
We will start by creating a simple search controller that handles search and selection of MapsIndoors locations
Declare a protocol for our location selection with a didSelectLocation method</description>
    </item>
    
    <item>
      <title>Creating your own Location Source - Part 1</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/locationdatasourcespeoplelocationsdatasource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/locationdatasourcespeoplelocationsdatasource/</guid>
      <description>Note! This document describes a pre-release feature. We reserve the right to change this feature and the corresponding interfaces without further notice. Any mentioned SDK versions are not intended for production use.
 In this tutorial we will show how you can build a custom Location Source, representing locations of people. The people locations will be served from a mocked list in the source and displayed on a map in a view controller.</description>
    </item>
    
    <item>
      <title>Creating your own Location Source - Part 2</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/locationdatasourceslocationdatasourcescontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/locationdatasourceslocationdatasourcescontroller/</guid>
      <description>Note! This document describes a pre-release feature. We reserve the right to change this feature and the corresponding interfaces without further notice. Any mentioned SDK versions are not intended for production use.
 This is part 2 of the tutorial of building a custom Location Source, representing locations of people. In Part 1 we created the Location Source. Now we will create a view controller displaying a map that shows the mocked people locations on top of a MapsIndoors map.</description>
    </item>
    
    <item>
      <title>Get Directions and Show the Result on a Map - Part 1</title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/showrouteshowrouteonmapcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/showrouteshowrouteonmapcontroller/</guid>
      <description>In this tutorial we will request a route, list the route parts and render these on a Google Map. A MapsIndoors route is made of one or more legs, each containing one or more steps.
We will start by making the controller that renders the route from the input of a route, a leg index and optionally a step index. Start by creating a UIViewController implementation that conforms to MPDirectionsRendererDelegate</description>
    </item>
    
    <item>
      <title>Get Directions and Show the Result on a Map - Part 1</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/showrouteshowrouteonmapcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/showrouteshowrouteonmapcontroller/</guid>
      <description>In this tutorial we will request a route, list the route parts and render these on a Google Map. A MapsIndoors route is made of one or more legs, each containing one or more steps.
We will start by making the controller that renders the route from the input of a route, a leg index and optionally a step index. Start by creating a UIViewController implementation that conforms to MPDirectionsRendererDelegate</description>
    </item>
    
    <item>
      <title>Get Directions and Show the Result on a Map - Part 2</title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/showrouteshowroutecontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/showrouteshowroutecontroller/</guid>
      <description>This is part 2 of the tutorial of requesting directions and showing the route result on a map. In Part 1 we created the controller that can display the map and route, and in this part we will create the controller that requests the route and list the route in a table. A MapsIndoors route is made of one or more legs, each containing one or more steps.
Start by creating a UIViewController implementation</description>
    </item>
    
    <item>
      <title>Get Directions and Show the Result on a Map - Part 2</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/showrouteshowroutecontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/showrouteshowroutecontroller/</guid>
      <description>This is part 2 of the tutorial of requesting directions and showing the route result on a map. In Part 1 we created the controller that can display the map and route, and in this part we will create the controller that requests the route and list the route in a table. A MapsIndoors route is made of one or more legs, each containing one or more steps.
Start by creating a UIViewController implementation</description>
    </item>
    
    <item>
      <title>MapsIndoors SDK for iOS - Tutorials</title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/</guid>
      <description>With these simple tutorials, each reflecting common use cases, you can get more hands on experience with MapsIndoors on iOS.
 Show Details for a Tapped Location Create a Search Experience Showing a Blue Dot / User Location  </description>
    </item>
    
    <item>
      <title>MapsIndoors SDK for iOS - Tutorials</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/</guid>
      <description>With these simple tutorials, each reflecting common use cases, you can get more hands on experience with MapsIndoors on iOS.
 Show Details for a Tapped Location Create a Search Experience Showing a Blue Dot / User Location Create a custom Location Source Work with grouped / clustered locations  </description>
    </item>
    
    <item>
      <title>MapsIndoors SDK for iOS v2 - Guides</title>
      <link>https://mapsindoors.github.io/ios/v2/guides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/guides/</guid>
      <description>Searching for Locations and Displaying the Results on a Map Use the MPLocationsProvider class to search for content in your MapsIndoors solution.
This example shows how to setup a query for the nearest single best matching location and display the result on the map:
let locations = MPLocationsProvider.init() let queryObj = MPLocationQuery.init() queryObj.query = &amp;quot;Toilet&amp;quot; queryObj.near = MPPoint.init(lat: 57.057964, lon: 9.9504112) queryObj.max = 1 locations.getLocationsUsing(queryObj) { (locationData, error) in if error == nil { let location = locationData?</description>
    </item>
    
    <item>
      <title>MapsIndoors SDK for iOS v2 - Guides</title>
      <link>https://mapsindoors.github.io/ios/v3/guides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/guides/</guid>
      <description>Searching for Locations and Displaying the Results on a Map Use the MPLocationsProvider class to search for content in your MapsIndoors solution.
This example shows how to setup a query for the nearest single best matching location and display the result on the map:
let locations = MPLocationsProvider.init() let queryObj = MPLocationQuery.init() queryObj.query = &amp;quot;Toilet&amp;quot; queryObj.near = MPPoint.init(lat: 57.057964, lon: 9.9504112) queryObj.max = 1 locations.getLocationsUsing(queryObj) { (locationData, error) in if error == nil { let location = locationData?</description>
    </item>
    
    <item>
      <title>MapsIndoors for iOS - Getting Started</title>
      <link>https://mapsindoors.github.io/ios/v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v1/</guid>
      <description>Note! A newer version of the MapsIndoors SDK for iOS is available. The legacy version will not receive new features and will only get bugfix and security updates.
 This guide explains how to start using a MapsIndoors map in your iOS application. Make sure that you have read the prerequisites.
Basic Example You will find in the link an up and running project that contains the minimum code to start a MapsIndoors project.</description>
    </item>
    
    <item>
      <title>MapsIndoors for iOS - Getting Started</title>
      <link>https://mapsindoors.github.io/ios/v2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/</guid>
      <description>Note! A newer version of the MapsIndoors SDK for iOS is available. The legacy version will not receive new features and will only get bugfix and security updates.
 This guide explains how to start using a MapsIndoors map in your iOS application. Make sure that you have read the prerequisites.
To benefit from the guides, you will need basic knowledge about:
 iOS Development Google Maps iOS SDK  You can get started in two ways, either by reviewing and modifying the basic examples or do the clean setup.</description>
    </item>
    
    <item>
      <title>MapsIndoors for iOS - Getting Started</title>
      <link>https://mapsindoors.github.io/ios/v3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/</guid>
      <description>This guide explains how to start using a MapsIndoors map in your iOS application. Make sure that you have read the prerequisites.
To benefit from the guides, you will need basic knowledge about:
 iOS Development Google Maps iOS SDK  You can get started in two ways, either by reviewing and modifying the basic examples or do the clean setup.
Basic Examples For simple examples of MapsIndoors implementations, run pod try MapsIndoors (see below for setting up CocoaPods or just clone this repository) and run the XCode Scheme called Demos.</description>
    </item>
    
    <item>
      <title>MapsIndoors for iOS - Part 2</title>
      <link>https://mapsindoors.github.io/ios/v1/guide-part2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v1/guide-part2/</guid>
      <description>Trying the demo App Open your Terminal and run
pod try MapsIndoors  This will install and fire up the full-featured SDK Demo Project. Remember to add your own key Google Maps iOS API key in AppDelegate:
GMSServices.provideAPIKey(&amp;quot;YOUR_GOOGLE_KEY&amp;quot;)  Using Routing Routing is requested with at least an origin, a destination and a transit mode – transit mode corresponds directly to Google Maps transit modes: Walking, bicycling, driving and transit (public transportation).</description>
    </item>
    
    <item>
      <title>MapsIndoors for iOS Reference Guide</title>
      <link>https://mapsindoors.github.io/ios/v1/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v1/reference/</guid>
      <description>Please head to this reference manual.</description>
    </item>
    
    <item>
      <title>Show Location Details</title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/locationdetailslocationdetailscontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/locationdetailslocationdetailscontroller/</guid>
      <description>This is an example of displaying some details of a MapsIndoors location
Start by creating a UIViewController class that conforms to the GMSMapViewDelegate protocol
class LocationDetailsController: UIViewController, GMSMapViewDelegate {  Add a GMSMapView and a MPMapControl to the class
var map: GMSMapView? = nil var mapControl: MPMapControl? = nil  Add other views needed for this example
var detailsView:UIStackView = UIStackView.init() var mainView:UIStackView = UIStackView.init() var nameLabel = UILabel.init() var descrLabel = UILabel.</description>
    </item>
    
    <item>
      <title>Show Location Details</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/locationdetailslocationdetailscontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/locationdetailslocationdetailscontroller/</guid>
      <description>This is an example of displaying some details of a MapsIndoors location
Start by creating a UIViewController class that conforms to the GMSMapViewDelegate protocol
class LocationDetailsController: UIViewController, GMSMapViewDelegate {  Add a GMSMapView and a MPMapControl to the class
var map: GMSMapView? = nil var mapControl: MPMapControl? = nil  Add other views needed for this example
var detailsView:UIStackView = UIStackView.init() var mainView:UIStackView = UIStackView.init() var nameLabel = UILabel.init() var descrLabel = UILabel.</description>
    </item>
    
    <item>
      <title>Show the Blue Dot with MapsIndoors - Part 1</title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/showmylocationmypositionprovider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/showmylocationmypositionprovider/</guid>
      <description>In this tutorial we will show how you can show a blue dot on the map, representing the users location. The position will be served from a mocked positioning provider and displayed on a map in a view controller.
We will start by creating our implementation of a positioning provider.
Create a class MyPositionProvider that inherits from NSObject and implements MPPositionProvider.
class MyPositionProvider : NSObject, MPPositionProvider {  Add some member variables to MyPositionProvider.</description>
    </item>
    
    <item>
      <title>Show the Blue Dot with MapsIndoors - Part 1</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/showmylocationmypositionprovider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/showmylocationmypositionprovider/</guid>
      <description>In this tutorial we will show how you can show a blue dot on the map, representing the users location. The position will be served from a mocked positioning provider and displayed on a map in a view controller.
We will start by creating our implementation of a positioning provider.
Create a class MyPositionProvider that inherits from NSObject and implements MPPositionProvider.
class MyPositionProvider : NSObject, MPPositionProvider {  Add some member variables to MyPositionProvider.</description>
    </item>
    
    <item>
      <title>Show the Blue Dot with MapsIndoors - Part 2</title>
      <link>https://mapsindoors.github.io/ios/v2/tutorials/showmylocationshowmylocationcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v2/tutorials/showmylocationshowmylocationcontroller/</guid>
      <description>This is part 2 of the tutorial of managing a blue dot on the map. In Part 1 we created the position provider. Now we will create a view controller displaying a map that shows the users (mock) location.
Create a class ShowMyLocationController that inherits from UIViewController.
class ShowMyLocationController: UIViewController {  Add a GMSMapView and a MPMapControl to the class
var map: GMSMapView? = nil var mapControl: MPMapControl? = nil override func viewDidLoad() { super.</description>
    </item>
    
    <item>
      <title>Show the Blue Dot with MapsIndoors - Part 2</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/showmylocationshowmylocationcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/showmylocationshowmylocationcontroller/</guid>
      <description>This is part 2 of the tutorial of managing a blue dot on the map. In Part 1 we created the position provider. Now we will create a view controller displaying a map that shows the users (mock) location.
Create a class ShowMyLocationController that inherits from UIViewController.
class ShowMyLocationController: UIViewController {  Add a GMSMapView and a MPMapControl to the class
var map: GMSMapView? = nil var mapControl: MPMapControl? = nil override func viewDidLoad() { super.</description>
    </item>
    
    <item>
      <title>Work with location grouping / clustering</title>
      <link>https://mapsindoors.github.io/ios/v3/tutorials/clusteringclusteringcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/ios/v3/tutorials/clusteringclusteringcontroller/</guid>
      <description>This is an example of enabling and disabling location grouping on the map as well as providing custom cluster tapping behavior and custom cluster images.
Start by creating a UIViewController class that conforms to the MPMapControlDelegate protocol
class ClusteringController: UIViewController, MPMapControlDelegate {  Add a GMSMapView and a MPMapControl to the class Also define a clustering enabling/disabling button and a dictionary to store the clustering images for reuse
var map: GMSMapView?</description>
    </item>
    
  </channel>
</rss>