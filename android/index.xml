<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Androids on Indoor Navigation Built with Google Maps</title>
    <link>https://mapsindoors.github.io/android/</link>
    <description>Recent content in Androids on Indoor Navigation Built with Google Maps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>MapsIndoors (c)2017</copyright>
    
	<atom:link href="https://mapsindoors.github.io/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/android/v1/guides/searching-and-directions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v1/guides/searching-and-directions/</guid>
      <description>//Locations provider, used for search MPLocationsProvider locs = new MPLocationsProvider(this);
//Directions renderer, used to display route on map DirectionsRenderer directionsRenderer = new DirectionsRenderer(this, selectionListener);
//Listen for query results locs.setOnLocationsReadyListener(new OnLocationsReadyListener() { @Override public void onLocationsReady(List locations) {
 //Origin hard-coded here Location origin = new MPLocation(new Point(57.956, 8.667, 0), &amp;quot;My location&amp;quot;); //Destination is first location in list Location destination = locations.get(0); RoutingProvider routingProvider = new MPRoutingProvider(); //Add listener routingProvider.setOnRouteResultListener(new OnRouteResultListener() { @Override public void onRouteResult(final Route newRoute) { //Render the route you get from the service (you need to create a selectionListener too) directionsRenderer.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/android/v2/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/changelog/</guid>
      <description>Changelog Changelog for the MapsIndoors Android SDK. This document structure is based on Keep a Changelog and the project adheres to Semantic Versioning.
[2.0.7] - 2018-09-05 Added  MapControl.setDisplayRuleDefaultIconSize(): Overwrites the display rules default icon size. Applies only to those display rules that don&amp;rsquo;t specify the size. LocationDisplayRule.Builder.setVectorDrawableIcon( vectorDrawableResId ): Sets the icon using a VectorDrawable at the default size (either the current base - 20dp or the one set with MapControl.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mapsindoors.github.io/android/v2/tutorials/showmultiplelocationsshowmultiplelocationsfragment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/tutorials/showmultiplelocationsshowmultiplelocationsfragment/</guid>
      <description>Add a GoogleMap and a MapControl to the class
MapControl mMapControl; GoogleMap mGoogleMap;  The lat lng of the Venue
static final LatLng VENUE_LAT_LNG = new LatLng( 57.05813067, 9.95058065 );  The query object and the querry builder
LocationQuery mLocationQuery; LocationQuery.Builder mLocationQueryBuilder; SupportMapFragment mMapFragment; public ShowMultipleLocationsFragment() {  init the query builder, in this case we will query for all to toilets
mLocationQueryBuilder. setQuery(&amp;quot;Toilet&amp;quot;). setOrderBy( LocationQuery.NO_ORDER ). setFloor(1). setMaxResults(50);  Build the query</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>https://mapsindoors.github.io/android/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/changelog/</guid>
      <description>Changelog for the MapsIndoors Android SDK. This document structure is based on Keep a Changelog and the project adheres to Semantic Versioning.
[2.0.3] - 2018-06-?? Added  MapsIndoors.getAvailableLanguages() returns a list of the solution&amp;rsquo;s available languages or just null if data isn&amp;rsquo;t available MIConnectivityUtils.isOnline() replaces UrlLoader.isOnline() MapControl.setOnMarkerInfoWindowLongClickListener()  Changed  MapsIndoors.getDefaultLanguage() will return now the solution&amp;rsquo;s default language instead of the library&amp;rsquo;s fallback one. If there is no data available yet, this method will now return null  Deprecated  UrlLoader.</description>
    </item>
    
    <item>
      <title>Changelog</title>
      <link>https://mapsindoors.github.io/android/v1/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v1/changelog/</guid>
      <description> Changelog for MapsIndoors for Android. This document structure is based on Keep a Changelog and the project adheres to Semantic Versioning.
## [2.0.0-beta1] - 2017-10-04 ### Changed - Put something in here&amp;hellip; - Fix MPLocation.copy() results in nil MPLocation.descr.
### Fixed - Fix geometry property nil when copying MPLocation - Fix unlabeled icons not respecting MapsIndoors.mapIconSize
Added  Support for statically adding a position provider, optionally by setting MapsIndoors.positionProvider  </description>
    </item>
    
    <item>
      <title>Create a Search Experience with MapsIndoors - Part 1</title>
      <link>https://mapsindoors.github.io/android/v2/tutorials/searchmapdemosearchfragment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/tutorials/searchmapdemosearchfragment/</guid>
      <description>This is an example of creating a simple search experience using MapsIndoors. We will create a map with a search button that leads to another Fragment that handles the search and selection. On selection of a location, we go back to the map and shows the selected location on the map.
We will start by creating a simple search controller that handles search and selection of MapsIndoors locations
Declare a listener for our location selection with a onUserSelectedLocation method</description>
    </item>
    
    <item>
      <title>Create a Search Experience with MapsIndoors - Part 2</title>
      <link>https://mapsindoors.github.io/android/v2/tutorials/searchmapdemosearchmapfragment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/tutorials/searchmapdemosearchmapfragment/</guid>
      <description>This is part 2 of the tutorial of creating a simple search experience using MapsIndoors. In Part 1 we created the search Fragment. Now we will create the &amp;ldquo;main&amp;rdquo; controller displaying the map and eventually the selected location.
Start by creating a Fragment
public class SearchMapFragment extends Fragment  Add a GoogleMap and a MapControl to the class
MapControl mMapControl; GoogleMap mGoogleMap;  Add other needed views for this example</description>
    </item>
    
    <item>
      <title>MapsIndoors SDK for Android - Tutorials</title>
      <link>https://mapsindoors.github.io/android/v2/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/tutorials/</guid>
      <description>With these simple tutorials, each reflecting common use cases, you can get more hands on experience with MapsIndoors on Android.
 Show Details for a Tapped Location Create a Search Experience Showing a Blue Dot / User Location  </description>
    </item>
    
    <item>
      <title>MapsIndoors SDK for iOS v2 - Guides</title>
      <link>https://mapsindoors.github.io/android/v2/guides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/guides/</guid>
      <description>Searching for Locations and Displaying the Results on a Map Use the MPLocationsProvider class to search for content in your MapsIndoors solution.
This example shows how to setup a query for the nearest single best matching location and display the result on the map:
mLocationsProvider = new MPLocationsProvider(); mLocationQueryBuilder = new LocationQuery.Builder(); // init the query builder, in this case we will query the coffee machine in our office mLocationQueryBuilder.</description>
    </item>
    
    <item>
      <title>MapsIndoors for Android - Getting Started</title>
      <link>https://mapsindoors.github.io/android/v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v1/</guid>
      <description>Note! A newer version of the MapsIndoors SDK for Android is available. The legacy version will not receive new features and will only get bugfix and security updates.
 This guide explains how to start using a MapsIndoors map in your Android application. Make sure that you have read the prerequisites.
Basic Example You will find in the link an up and running project that contains the minimum code to start a MapsIndoors project.</description>
    </item>
    
    <item>
      <title>MapsIndoors for Android - Getting Started</title>
      <link>https://mapsindoors.github.io/android/v2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/</guid>
      <description>This guide explains how to start using a MapsIndoors map in your Android application. Make sure that you have read the prerequisites.
To benefit from the guides, you will need basic knowledge about:
 Android Development Google Maps Android API  You can get started in two ways, either by reviewing and modifying the basic example or do the clean setup.
Basic Example You will find in the link a repo that contains the minimum code to start a MapsIndoors project.</description>
    </item>
    
    <item>
      <title>MapsIndoors for Android - Part 2</title>
      <link>https://mapsindoors.github.io/android/v1/guide-part2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v1/guide-part2/</guid>
      <description>Trying the demo App You can download the demo app from our github repository: Demo App Then run it and don&amp;rsquo;t forget to do a Gradle sync before and download all the required dependencies.
Using Routing Routing is requested with at least an origin, a destination and a transit mode – transit mode corresponds directly to Google Maps transit modes: Walking, bicycling, driving and transit (public transportation).
RoutingProvider routingProvider = new MPRoutingProvider(); routingProvider.</description>
    </item>
    
    <item>
      <title>MapsIndoors for Android Reference Guide</title>
      <link>https://mapsindoors.github.io/android/v1/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v1/reference/</guid>
      <description>Please head to this reference manual.</description>
    </item>
    
    <item>
      <title>Show Location Details</title>
      <link>https://mapsindoors.github.io/android/v2/tutorials/locationdetailsdemolocationdetailsfragment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/tutorials/locationdetailsdemolocationdetailsfragment/</guid>
      <description>This is an example of displaying some details of a MapsIndoors location
Start by creating a Fragment or an Activity class that contains the google map fragment
public class LocationDetailsFragment extends Fragment  Add a GoogleMap and a MapControl to the class
MapControl mMapControl; GoogleMap mGoogleMap;  Add other needed views for this example
SupportMapFragment mMapFragment; TextView detailsTextView;  The lat lng of the Venue
static final LatLng VENUE_LAT_LNG = new LatLng( 57.</description>
    </item>
    
    <item>
      <title>Show the Blue Dot with MapsIndoors - Part 1</title>
      <link>https://mapsindoors.github.io/android/v2/tutorials/showuserlocationdemopositionprovider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/tutorials/showuserlocationdemopositionprovider/</guid>
      <description>In this tutorial we will show how you can show a blue dot on the map, representing the users location. The position will be served from a mocked positioning provider and displayed on a map in a view controller.
We will start by creating our implementation of a positioning provider.
Create a class DemoPositionProvider that implements PositionProvider.
public class DemoPositionProvider implements PositionProvider  Add some member variables to DemoPositionProvider.
 mPositionUpdateListener: The listener object isRunning: A running state boolean flag mLatestPosition: The latest positioning result mPositionUpdateTimer: A timer so we can update the position of the user within an time interval</description>
    </item>
    
    <item>
      <title>Show the Blue Dot with MapsIndoors - Part 2</title>
      <link>https://mapsindoors.github.io/android/v2/tutorials/showuserlocationshowuserlocationfragment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mapsindoors.github.io/android/v2/tutorials/showuserlocationshowuserlocationfragment/</guid>
      <description>This is part 2 of the tutorial of managing a blue dot on the map. In Part 1 we created the position provider. Now we will create a Fragment displaying a map that shows the users (mock) location.
Create a class ShowUserLocationFragment that inherits from Fragment.
public class ShowUserLocationFragment extends Fragment {  Add a GoogleMap and a MapControl to the class
GoogleMap mGoogleMap; MapControl mMapControl;  Add a map fragment</description>
    </item>
    
  </channel>
</rss>